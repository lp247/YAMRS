{"ast":null,"code":"import _taggedTemplateLiteral from \"C:\\\\Users\\\\peter\\\\Git\\\\Privat\\\\YAMRS\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\peter\\\\Git\\\\Privat\\\\YAMRS\\\\frontend\\\\src\\\\App.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  background-color: black;\\n  display: flex;\\n  flex-direction: row;\\n  flex-wrap: wrap;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as React from 'react';\nimport './App.css';\nimport * as config from './config.json';\nimport getMovies from './requests/movies';\nimport { MovieTile } from './MovieTile';\nimport styled from 'styled-components';\nconst GridContainer = styled.div(_templateObject());\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      movieData: [],\n      tileWidth: 0,\n      loadingError: false\n    };\n    this.updateTileWidth = this.updateTileWidth.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateTileWidth();\n    window.addEventListener('resize', this.updateTileWidth);\n    getMovies().then(movieData => {\n      this.setState({\n        loading: false,\n        movieData\n      });\n    }).catch(err => {\n      this.setState({\n        loading: false,\n        loadingError: true\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateTileWidth);\n  }\n\n  updateTileWidth() {\n    const meanWidth = 250;\n    const total = document.body.clientWidth;\n    const numTiles = Math.floor(total / meanWidth) + 1;\n    const tileWidth = total / numTiles;\n    this.setState({\n      tileWidth\n    });\n  }\n\n  render() {\n    return React.createElement(GridContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, this.state.movieData.map(d => React.createElement(MovieTile, {\n      key: d.id,\n      src: \"\".concat(config.imgBasePath).concat(d.poster_path),\n      width: this.state.tileWidth,\n      onClick: () => console.log(\"Movie with id \".concat(d.id, \" clicked.\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\peter\\Git\\Privat\\YAMRS\\frontend\\src\\App.tsx"],"names":["React","config","getMovies","MovieTile","styled","GridContainer","div","App","Component","constructor","props","state","loading","movieData","tileWidth","loadingError","updateTileWidth","bind","componentDidMount","window","addEventListener","then","setState","catch","err","componentWillUnmount","removeEventListener","meanWidth","total","document","body","clientWidth","numTiles","Math","floor","render","map","d","id","imgBasePath","poster_path","console","log"],"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,WAAP;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AAEA,SAAQC,SAAR,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,aAAa,GAAGD,MAAM,CAACE,GAAV,mBAAnB;;AAcA,MAAMC,GAAN,SAAkBP,KAAK,CAACQ,SAAxB,CAAgD;AAC9CC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,IADE;AAEXC,MAAAA,SAAS,EAAE,EAFA;AAGXC,MAAAA,SAAS,EAAE,CAHA;AAIXC,MAAAA,YAAY,EAAE;AAJH,KAAb;AAMA,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAvB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKF,eAAL;AACAG,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKJ,eAAvC;AACAd,IAAAA,SAAS,GACNmB,IADH,CACSR,SAAD,IAAwB;AAC5B,WAAKS,QAAL,CAAc;AACZV,QAAAA,OAAO,EAAE,KADG;AAEZC,QAAAA;AAFY,OAAd;AAID,KANH,EAOGU,KAPH,CAOUC,GAAD,IAAc;AACnB,WAAKF,QAAL,CAAc;AACZV,QAAAA,OAAO,EAAE,KADG;AAEZG,QAAAA,YAAY,EAAE;AAFF,OAAd;AAID,KAZH;AAaD;;AAEDU,EAAAA,oBAAoB,GAAG;AACrBN,IAAAA,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqC,KAAKV,eAA1C;AACD;;AAEDA,EAAAA,eAAe,GAAG;AAChB,UAAMW,SAAS,GAAG,GAAlB;AACA,UAAMC,KAAK,GAAGC,QAAQ,CAACC,IAAT,CAAcC,WAA5B;AACA,UAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWN,KAAK,GAAGD,SAAnB,IAAgC,CAAjD;AACA,UAAMb,SAAS,GAAGc,KAAK,GAAGI,QAA1B;AACA,SAAKV,QAAL,CAAc;AAACR,MAAAA;AAAD,KAAd;AACD;;AAEDqB,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKxB,KAAL,CAAWE,SAAX,CAAqBuB,GAArB,CAA0BC,CAAD,IACxB,oBAAC,SAAD;AACE,MAAA,GAAG,EAAEA,CAAC,CAACC,EADT;AAEE,MAAA,GAAG,YAAKrC,MAAM,CAACsC,WAAZ,SAA0BF,CAAC,CAACG,WAA5B,CAFL;AAGE,MAAA,KAAK,EAAE,KAAK7B,KAAL,CAAWG,SAHpB;AAIE,MAAA,OAAO,EAAE,MAAM2B,OAAO,CAACC,GAAR,yBAA6BL,CAAC,CAACC,EAA/B,eAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CADF;AAYD;;AAvD6C;;AA4DhD,eAAe/B,GAAf","sourcesContent":["import * as React from 'react';\nimport './App.css';\nimport * as config from './config.json';\nimport getMovies from './requests/movies';\nimport {Movie} from './types';\nimport {MovieTile} from './MovieTile';\nimport styled from 'styled-components';\n\nconst GridContainer = styled.div`\n  background-color: black;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n`;\n\ninterface AppState {\n  loading: boolean;\n  movieData: Movie[];\n  tileWidth: number;\n  loadingError: boolean;\n}\n\nclass App extends React.Component<{}, AppState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      loading: true,\n      movieData: [],\n      tileWidth: 0,\n      loadingError: false,\n    };\n    this.updateTileWidth = this.updateTileWidth.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateTileWidth();\n    window.addEventListener('resize', this.updateTileWidth);\n    getMovies()\n      .then((movieData: Movie[]) => {\n        this.setState({\n          loading: false,\n          movieData\n        })\n      })\n      .catch((err: any) => {\n        this.setState({\n          loading: false,\n          loadingError: true\n        });\n      });\n  }\n    \n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateTileWidth);\n  }\n\n  updateTileWidth() {\n    const meanWidth = 250;\n    const total = document.body.clientWidth;\n    const numTiles = Math.floor(total / meanWidth) + 1;\n    const tileWidth = total / numTiles;\n    this.setState({tileWidth});\n  }\n\n  render() {\n    return (\n      <GridContainer>\n        {this.state.movieData.map((d: Movie) => (\n          <MovieTile\n            key={d.id}\n            src={`${config.imgBasePath}${d.poster_path}`}\n            width={this.state.tileWidth}\n            onClick={() => console.log(`Movie with id ${d.id} clicked.`)}\n          />\n        ))}\n      </GridContainer>\n    );\n  }\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}