{"ast":null,"code":"import * as config from '../config.json';\n\nconst getMovieRequestPath = page => {\n  return \"https://api.themoviedb.org/3/movie/now_playing?api_key=\".concat(config.apiKey, \"&page=\").concat(page);\n};\n\nexport default function () {\n  return fetch(getMovieRequestPath(1)) // Extract json from response object.\n  .then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    throw new Error(\"Response not ok\");\n  }) // The json includes a field 'total_pages' with the total amount of pages\n  // to query on.\n  .then(json => {\n    const numPages = json.total_pages; // If the field is not given, the response must be erroneous. Else\n    // continue with all queries.\n\n    if (!numPages) {\n      return Promise.reject(\"Error in requesting movie data\");\n    } else {\n      // Create an array with consecutive numbers from 1 to the total amount\n      // of pages.\n      const arr = Array.from(Array(numPages).keys());\n      arr.shift(); // Out of the given array, create an array with queries on all pages.\n      // Every number in the array is the page to query.\n\n      const fetchArr = arr.map(n => fetch(getMovieRequestPath(n))); // Return a promise combining all the queries.\n\n      return Promise.all(fetchArr);\n    }\n  }) // Converting the resulting array of responses into an array of the\n  // promised json documents.\n  .then(res => {\n    return Promise.all(res.map(r => r.json()));\n  }) // Extract the array of movies out of the request data and merge all to\n  // get a complete list of movies.\n  .then(movReqs => {\n    return movReqs.map(mr => mr.results).flat();\n  });\n}","map":{"version":3,"sources":["C:\\Users\\peter\\Git\\Privat\\YAMRS\\frontend\\src\\requests\\movies.ts"],"names":["config","getMovieRequestPath","page","apiKey","fetch","then","res","ok","json","Error","numPages","total_pages","Promise","reject","arr","Array","from","keys","shift","fetchArr","map","n","all","r","movReqs","mr","results","flat"],"mappings":"AACA,OAAO,KAAKA,MAAZ,MAAwB,gBAAxB;;AAEA,MAAMC,mBAAmB,GAAIC,IAAD,IAAkB;AAC5C,0EAAiEF,MAAM,CAACG,MAAxE,mBAAuFD,IAAvF;AACD,CAFD;;AAIA,eAAe,YAA6B;AAC1C,SAAOE,KAAK,CAACH,mBAAmB,CAAC,CAAD,CAApB,CAAL,CAEH;AAFG,GAGFI,IAHE,CAGIC,GAAD,IAAmB;AACvB,QAAIA,GAAG,CAACC,EAAR,EAAY;AACV,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACD;;AACD,UAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD,GARE,EAUH;AACA;AAXG,GAYFJ,IAZE,CAYIG,IAAD,IAAwB;AAC5B,UAAME,QAAQ,GAAGF,IAAI,CAACG,WAAtB,CAD4B,CAG5B;AACA;;AACA,QAAI,CAACD,QAAL,EAAe;AACb,aAAOE,OAAO,CAACC,MAAR,CAAe,gCAAf,CAAP;AACD,KAFD,MAEO;AAEL;AACA;AACA,YAAMC,GAAa,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACL,QAAD,CAAL,CAAgBO,IAAhB,EAAX,CAAtB;AACAH,MAAAA,GAAG,CAACI,KAAJ,GALK,CAOL;AACA;;AACA,YAAMC,QAAQ,GAAGL,GAAG,CAACM,GAAJ,CAASC,CAAD,IAAejB,KAAK,CAACH,mBAAmB,CAACoB,CAAD,CAApB,CAA5B,CAAjB,CATK,CAWL;;AACA,aAAOT,OAAO,CAACU,GAAR,CAAYH,QAAZ,CAAP;AAED;AACF,GAlCE,EAoCH;AACA;AArCG,GAsCFd,IAtCE,CAsCIC,GAAD,IAAqB;AACzB,WAAOM,OAAO,CAACU,GAAR,CAAYhB,GAAG,CAACc,GAAJ,CAASG,CAAD,IAAiBA,CAAC,CAACf,IAAF,EAAzB,CAAZ,CAAP;AACD,GAxCE,EA0CH;AACA;AA3CG,GA4CFH,IA5CE,CA4CImB,OAAD,IAA6B;AACjC,WAAOA,OAAO,CAACJ,GAAR,CAAaK,EAAD,IAAsBA,EAAE,CAACC,OAArC,EAA8CC,IAA9C,EAAP;AACD,GA9CE,CAAP;AAgDD","sourcesContent":["import {Movie, MovieRequest} from \"../types\";\nimport * as config from '../config.json';\n\nconst getMovieRequestPath = (page: number) => {\n  return `https://api.themoviedb.org/3/movie/now_playing?api_key=${config.apiKey}&page=${page}`;\n}\n\nexport default function(): Promise<Movie[]> {\n  return fetch(getMovieRequestPath(1))\n\n      // Extract json from response object.\n      .then((res: Response) => {\n        if (res.ok) {\n          return res.json();\n        }\n        throw new Error(\"Response not ok\");\n      })\n\n      // The json includes a field 'total_pages' with the total amount of pages\n      // to query on.\n      .then((json: MovieRequest) => {\n        const numPages = json.total_pages;\n\n        // If the field is not given, the response must be erroneous. Else\n        // continue with all queries.\n        if (!numPages) {\n          return Promise.reject(\"Error in requesting movie data\");\n        } else {\n\n          // Create an array with consecutive numbers from 1 to the total amount\n          // of pages.\n          const arr: number[] = Array.from(Array(numPages).keys());\n          arr.shift();\n\n          // Out of the given array, create an array with queries on all pages.\n          // Every number in the array is the page to query.\n          const fetchArr = arr.map((n: number) => fetch(getMovieRequestPath(n)));\n\n          // Return a promise combining all the queries.\n          return Promise.all(fetchArr);\n\n        }\n      })\n\n      // Converting the resulting array of responses into an array of the\n      // promised json documents.\n      .then((res: Response[]) => {\n        return Promise.all(res.map((r: Response) => r.json()));\n      })\n\n      // Extract the array of movies out of the request data and merge all to\n      // get a complete list of movies.\n      .then((movReqs: MovieRequest[]) => {\n        return movReqs.map((mr: MovieRequest) => mr.results).flat();\n      })\n\n}"]},"metadata":{},"sourceType":"module"}